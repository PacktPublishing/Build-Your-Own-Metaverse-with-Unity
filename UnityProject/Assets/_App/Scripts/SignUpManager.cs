using TMPro;
using UnityEngine;
using Firebase.Auth;
using Firebase.Firestore;
using Firebase.Extensions;
using System.Threading.Tasks;

public class SignUpManager : MonoBehaviour
{
    //In these variables we will bind the scene inputs NicknameInput, UsernameInput and PasswordInput in order to access their values later on
    public TMP_InputField nicknameInput;
    public TMP_InputField usernameInput;
    public TMP_InputField passwordInput;

    //Firebase Authentication SDK Instance
    FirebaseAuth auth;

    //Firestore SDK Instance
    FirebaseFirestore db;

    // Start is called before the first frame update
    void Start()
    {
        //When starting the script when the scene starts, we make sure that we get the Firebase SDK instances so that we can access its methods
        InitializeFirebase();
    }

    void InitializeFirebase()
    {
        if (auth == null)
        {
            auth = FirebaseAuth.DefaultInstance;
        }

        if (db == null)
        {
            db = FirebaseFirestore.DefaultInstance;
        }
    }


    public void CreateUser()
    {
        //At this point, if the user has not completely filled out the registration form, we cannot continue.
        if (string.IsNullOrEmpty(nicknameInput.text) || string.IsNullOrEmpty(usernameInput.text) || string.IsNullOrEmpty(passwordInput.text))
        {
            Debug.Log("Missing information in the registration form");
            return;
        }

        //We call the CreateUserWithEmailAndPasswordAsync method of the SDK to create a new user with the user and password we have entered. 
        auth.CreateUserWithEmailAndPasswordAsync(usernameInput.text, passwordInput.text).ContinueWithOnMainThread(async task =>
        {
            if (task.IsCanceled)
            {
                Debug.LogError("CreateUserWithEmailAndPasswordAsync was canceled.");
                return;
            }
            if (task.IsFaulted)
            {
                Debug.LogError("CreateUserWithEmailAndPasswordAsync encountered an error: " + task.Exception);
                return;
            }


            //At this point, the user is correctly created.
            FirebaseUser newUser = task.Result;

            Debug.LogFormat("User created successfully: {0}", newUser.UserId);


            //We update the user's profile with the Nickname entered.
            await UpdateUserProfile();

            //We create a reference to the user in a Users collection in Firebase Firestore, this will be useful in the future to store information related to the user.
            await CreateUserDataDocument();
        });
    }

    private async Task UpdateUserProfile()
    {
        var currentUser = FirebaseAuth.DefaultInstance.CurrentUser;

        UserProfile userProfile = new UserProfile()
        {
            DisplayName = nicknameInput.text
        };

        await currentUser.UpdateUserProfileAsync(userProfile);
    }

    private async Task CreateUserDataDocument()
    {
        var currentUser = FirebaseAuth.DefaultInstance.CurrentUser;

        //We create a reference to the "Users" collection with a new document that will have as ID the autogenerated UserId code.
        DocumentReference docRef = db.Collection("Users").Document(currentUser.UserId);

        UserData userData = new UserData()
        {
            Uid = currentUser.UserId,
            Nickname = nicknameInput.text,
            Username = usernameInput.text,
        };


        //We call the SetAsync method to write the changes to the database, we use the SetOptions.MergeAll
        //option not to replace all the properties in the database, but the ones that have been modified.
        await docRef.SetAsync(userData, SetOptions.MergeAll).ContinueWithOnMainThread(task =>
        {
            if (task.IsCanceled)
            {
                Debug.LogError("Creating user data was canceled.");
                return;
            }
            if (task.IsFaulted)
            {
                Debug.LogError("Creating user data encountered an error: " + task.Exception);
                return;
            }

            Debug.Log("User data created or updated succesfully");

            //Once we have created the user, updated their profile with the Nickname and created the reference in the database, we can change scene and go to our Meeting Point, the initial scene MainScene
            NetworkManager.Instance.JoinRoom("MainScene");

        });
    }
}
