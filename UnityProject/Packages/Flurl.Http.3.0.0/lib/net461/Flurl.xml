<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flurl.Http</name>
    </assembly>
    <members>
        <member name="T:Flurl.Http.Configuration.DefaultFlurlClientFactory">
            <summary>
            An IFlurlClientFactory implementation that caches and reuses the same one instance of
            FlurlClient per combination of scheme, host, and port. This is the default
            implementation used when calls are made fluently off Urls/strings.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.DefaultFlurlClientFactory.GetCacheKey(Flurl.Url)">
            <summary>
            Returns a unique cache key based on scheme, host, and port of the given URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>The cache key</returns>
        </member>
        <member name="T:Flurl.Http.Configuration.DefaultHttpClientFactory">
            <summary>
            Default implementation of IHttpClientFactory used by FlurlHttp. The created HttpClient includes hooks
            that enable FlurlHttp's testing features and respect its configuration settings. Therefore, custom factories
            should inherit from this class, rather than implementing IHttpClientFactory directly.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.DefaultHttpClientFactory.CreateHttpClient(System.Net.Http.HttpMessageHandler)">
            <summary>
            Override in custom factory to customize the creation of HttpClient used in all Flurl HTTP calls.
            In order not to lose Flurl.Http functionality, it is recommended to call base.CreateClient and
            customize the result.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.DefaultHttpClientFactory.CreateMessageHandler">
            <summary>
            Override in custom factory to customize the creation of HttpClientHandler used in all Flurl HTTP calls.
            In order not to lose Flurl.Http functionality, it is recommended to call base.CreateMessageHandler and
            customize the result.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.DefaultUrlEncodedSerializer">
            <summary>
            ISerializer implementation that converts an object representing name/value pairs to a URL-encoded string.
            Default serializer used in calls to PostUrlEncodedAsync, etc. 
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.DefaultUrlEncodedSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Flurl.Http.Configuration.DefaultUrlEncodedSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified s.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s">The s.</param>
            <exception cref="T:System.NotImplementedException">Deserializing to UrlEncoded not supported.</exception>
        </member>
        <member name="M:Flurl.Http.Configuration.DefaultUrlEncodedSerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes the specified stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">The stream.</param>
            <exception cref="T:System.NotImplementedException">Deserializing to UrlEncoded not supported.</exception>
        </member>
        <member name="T:Flurl.Http.Configuration.FlurlClientFactoryBase">
            <summary>
            Encapsulates a creation/caching strategy for IFlurlClient instances. Custom factories looking to extend
            Flurl's behavior should inherit from this class, rather than implementing IFlurlClientFactory directly.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlClientFactoryBase.Get(Flurl.Url)">
            <summary>
            By default, uses a caching strategy of one FlurlClient per host. This maximizes reuse of
            underlying HttpClient/Handler while allowing things like cookies to be host-specific.
            </summary>
            <param name="url">The URL.</param>
            <returns>The FlurlClient instance.</returns>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlClientFactoryBase.GetCacheKey(Flurl.Url)">
            <summary>
            Defines a strategy for getting a cache key based on a Url. Default implementation
            returns the host part (i.e www.api.com) so that all calls to the same host use the
            same FlurlClient (and HttpClient/HttpMessageHandler) instance.
            </summary>
            <param name="url">The URL.</param>
            <returns>The cache key</returns>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlClientFactoryBase.Create(Flurl.Url)">
            <summary>
            Creates a new FlurlClient
            </summary>
            <param name="url">The URL (not used)</param>
            <returns></returns>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlClientFactoryBase.Dispose">
            <summary>
            Disposes all cached IFlurlClient instances and clears the cache.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.FlurlHttpSettings">
            <summary>
            A set of properties that affect Flurl.Http behavior
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlHttpSettings.#ctor">
            <summary>
            Creates a new FlurlHttpSettings object.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.Defaults">
            <summary>
            Gets or sets the default values to fall back on when values are not explicitly set on this instance.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.Timeout">
            <summary>
            Gets or sets the HTTP request timeout.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.AllowedHttpStatusRange">
            <summary>
            Gets or sets a pattern representing a range of HTTP status codes which (in addtion to 2xx) will NOT result in Flurl.Http throwing an Exception.
            Examples: "3xx", "100,300,600", "100-299,6xx", "*" (allow everything)
            2xx will never throw regardless of this setting.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.JsonSerializer">
            <summary>
            Gets or sets object used to serialize and deserialize JSON. Default implementation uses Newtonsoft Json.NET.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.UrlEncodedSerializer">
            <summary>
            Gets or sets object used to serialize URL-encoded data. (Deserialization not supported in default implementation.)
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.Redirects">
            <summary>
            Gets object whose properties describe how Flurl.Http should handle redirect (3xx) responses.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.BeforeCall">
            <summary>
            Gets or sets a callback that is invoked immediately before every HTTP request is sent.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.BeforeCallAsync">
            <summary>
            Gets or sets a callback that is invoked asynchronously immediately before every HTTP request is sent.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.AfterCall">
            <summary>
            Gets or sets a callback that is invoked immediately after every HTTP response is received.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.AfterCallAsync">
            <summary>
            Gets or sets a callback that is invoked asynchronously immediately after every HTTP response is received.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.OnError">
            <summary>
            Gets or sets a callback that is invoked when an error occurs during any HTTP call, including when any non-success
            HTTP status code is returned in the response. Response should be null-checked if used in the event handler.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.OnErrorAsync">
            <summary>
            Gets or sets a callback that is invoked asynchronously when an error occurs during any HTTP call, including when any non-success
            HTTP status code is returned in the response. Response should be null-checked if used in the event handler.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.OnRedirect">
            <summary>
            Gets or sets a callback that is invoked when any 3xx response with a Location header is received.
            You can inspect/manipulate the call.Redirect object to determine what will happen next.
            An auto-redirect will only happen if call.Redirect.Follow is true upon exiting the callback.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.FlurlHttpSettings.OnRedirectAsync">
            <summary>
            Gets or sets a callback that is invoked asynchronously when any 3xx response with a Location header is received.
            You can inspect/manipulate the call.Redirect object to determine what will happen next.
            An auto-redirect will only happen if call.Redirect.Follow is true upon exiting the callback.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlHttpSettings.ResetDefaults">
            <summary>
            Resets all overridden settings to their default values. For example, on a FlurlRequest,
            all settings are reset to FlurlClient-level settings.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlHttpSettings.Get``1(System.String)">
            <summary>
            Gets a settings value from this instance if explicitly set, otherwise from the default settings that back this instance.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlHttpSettings.Set``1(``0,System.String)">
            <summary>
            Sets a settings value for this instance.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.ClientFlurlHttpSettings">
            <summary>
            Client-level settings for Flurl.Http
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.ClientFlurlHttpSettings.ConnectionLeaseTimeout">
            <summary>
            Specifies the time to keep the underlying HTTP/TCP connection open. When expired, a Connection: close header
            is sent with the next request, which should force a new connection and DSN lookup to occur on the next call.
            Default is null, effectively disabling the behavior.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.ClientFlurlHttpSettings.HttpClientFactory">
            <summary>
            Gets or sets a factory used to create the HttpClient and HttpMessageHandler used for HTTP calls.
            Whenever possible, custom factory implementations should inherit from DefaultHttpClientFactory,
            only override the method(s) needed, call the base method, and modify the result.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.GlobalFlurlHttpSettings">
            <summary>
            Global default settings for Flurl.Http
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.GlobalFlurlHttpSettings.Defaults">
            <summary>
            Defaults at the global level do not make sense and will always be null.
            </summary>
        </member>
        <member name="P:Flurl.Http.Configuration.GlobalFlurlHttpSettings.FlurlClientFactory">
            <summary>
            Gets or sets the factory that defines creating, caching, and reusing FlurlClient instances and,
            by proxy, HttpClient instances.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.GlobalFlurlHttpSettings.ResetDefaults">
            <summary>
            Resets all global settings to their default values.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.TestFlurlHttpSettings">
            <summary>
            Settings overrides within the context of an HttpTest
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.TestFlurlHttpSettings.ResetDefaults">
            <summary>
            Resets all test settings to their Flurl.Http-defined default values.
            </summary>
        </member>
        <member name="T:Flurl.Http.Configuration.IFlurlClientFactory">
            <summary>
            Interface for defining a strategy for creating, caching, and reusing IFlurlClient instances and,
            by proxy, their underlying HttpClient instances.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.IFlurlClientFactory.Get(Flurl.Url)">
            <summary>
            Strategy to create a FlurlClient or reuse an exisitng one, based on URL being called.
            </summary>
            <param name="url">The URL being called.</param>
            <returns></returns>
        </member>
        <member name="T:Flurl.Http.Configuration.FlurlClientFactoryExtensions">
            <summary>
            Extension methods on IFlurlClientFactory
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.FlurlClientFactoryExtensions.ConfigureClient(Flurl.Http.Configuration.IFlurlClientFactory,System.String,System.Action{Flurl.Http.IFlurlClient})">
            <summary>
            Provides thread-safe access to a specific IFlurlClient, typically to configure settings and default headers.
            The URL is used to find the client, but keep in mind that the same client will be used in all calls to the same host by default.
            </summary>
            <param name="factory">This IFlurlClientFactory.</param>
            <param name="url">the URL used to find the IFlurlClient.</param>
            <param name="configAction">the action to perform against the IFlurlClient.</param>
        </member>
        <member name="T:Flurl.Http.Configuration.IHttpClientFactory">
            <summary>
            Interface defining creation of HttpClient and HttpMessageHandler used in all Flurl HTTP calls.
            Implementation can be added via FlurlHttp.Configure. However, in order not to lose much of
            Flurl.Http's functionality, it's almost always best to inherit DefaultHttpClientFactory and
            extend the base implementations, rather than implementing this interface directly.
            </summary>
        </member>
        <member name="M:Flurl.Http.Configuration.IHttpClientFactory.CreateHttpClient(System.Net.Http.HttpMessageHandler)">
            <summary>
            Defines how HttpClient should be instantiated and configured by default. Do NOT attempt
            to cache/reuse HttpClient instances here - that should be done at the